import io
import logging
import pyzipper
from datetime import datetime
from typing import Any, Iterable

import requests

from api_app.ingestors_manager.classes import Ingestor
from api_app.ingestors_manager.exceptions import IngestorRunException
from tests.mock_utils import MockUpResponse, if_mock_connections

logger = logging.getLogger(__name__)


class MalwareBazaar(Ingestor):
    url: str
    hours: int
    signatures: str

    def run(self) -> Iterable[Any]:
        # extract file hashes per signature
        hashes = set()
        now = datetime.now()
        for signature in self.signatures:
            result = requests.post(
                self.url, data={
                    "query": "get_siginfo",
                    "signature": signature,
                    "limit": 100
                }
            )
            result.raise_for_status()
            content = result.json()
            logger.info(f"Malware bazaar data for signature {signature} is {content}")
            if content["query_status"] != "ok":
                raise IngestorRunException(
                    f"Query status is invalid: {content['query_status']}"
                )
            if not isinstance(content["data"], list):
                raise IngestorRunException(f"Content {content} not expected")

            for elem in content["data"]:
                first_seen = datetime.strptime(elem["first_seen"], '%Y-%m-%d %H:%M:%S')
                diff = int((now - first_seen).total_seconds()) // 3600
                if elem["signature"] == signature and diff <= self.hours:
                    hashes.add(elem["sha256_hash"])

            last_hours_str = "Last hour" if self.hours == 1 else f"Last {self.hours} hours"
            logger.info(f"{last_hours_str} {signature} samples: {len(hashes)}/{len(content['data'])}")

        # download sample and create new analysis
        for h in hashes:
            logger.info(f"Downloading sample {h}")
            sample_archive = requests.post(
                self.url, data={
                    "query": "get_file",
                    "sha256_hash": h,
                }
            )
            sample_archive.raise_for_status()
            logger.info(f"Correctly downloaded sample {h}")
            with pyzipper.AESZipFile(io.BytesIO(sample_archive.content)) as zf:
                zf.setpassword(b"infected")
                files = zf.namelist()
                if files and len(files) == 1:
                    sample = zf.read(files[0])

            yield sample

    @classmethod
    def _monkeypatch(cls):
        patches = []
        return super()._monkeypatch(patches=patches)
